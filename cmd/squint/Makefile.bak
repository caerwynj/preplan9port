TARG		= squint
INCLUDES	= -I../include
LIBDIR		= ../lib
LIBS9		= -lbio -l9
LIBS		= $(LIBS9) -lm
#CFLAGS		= -g -Wall -ffixed-ebx $(INCLUDES)
CFLAGS		= -g -ansi $(INCLUDES)
LDFLAGS		= -L$(LIBDIR)
CC		= gcc
LD		= gcc

BUILTINS=

CODE=arith.c ctl.c proc.c var.c
CO=arith.o ctl.o proc.o var.o
FO=squint.o alloc.o bltin.o compile.o const.o declare.o error.o \
	lex.o main.o node.o symbol.o type.o xec.o
#SO=space.o fmount.o
#LIBO=libio.o liblib.o libg.o liblayer.o
SO=space.o
LIBO=libio.o liblib.o

OFILES		= $(FO) $(CO) $(SO) $(LIBO)

$(TARG): $(FO) $(CO) $(SO) $(LIBO) $(LIBDIR)/*.a
	$(LD) $(LDFLAGS) -o $@ $(FO) $(CO) $(SO) $(LIBO) $(LIBS)

y.tab.h squint.c:	squint.y short.y.debug
	yacc -D1 -d squint.y
	mv y.tab.c squint.c
	diff y.debug ref.y.debug
	cp short.y.debug y.debug

ydefs.h:	y.tab.h
	cmp -s y.tab.h ydefs.h || cp y.tab.h ydefs.h

slib.h:	sliblib.h slibio.h
	cat $< > slib.h

nodenames.h typenames.h:	node.h enumtoname
	enumtoname Ntype < node.h > nodenames.h
	enumtoname Ttype < node.h > typenames.h

inst.h insttab.h:	inst
	echo build inst.h insttab.h
	{echo 'typedef enum Inst{'
		sed 's/.*/	&,/' inst;
		echo '	NInst';
	echo '}Inst;'
	sed 's/^I/extern int i/;s/$/(Proc*);/' inst
	echo 'extern struct Insttab{ int (*fp)(Proc*); char *name;} insttab[];'} > inst.h
	{sed 's/^I/i/;s/.*/extern int &(Proc*);/' inst;
	echo 'struct Insttab insttab[]={'
	sed 's/.\(.*\)/	i\1, "&",/' inst
	echo '};'} > insttab.h
	
inst:	$(CODE)
	cat $(CODE) | grep '^i.*(Proc \*proc)' | sed 's/^i/I/; s/(.*//; s/.*/&/' | sort > ninst
	cmp -s inst ninst || mv ninst inst

regress:	squint
	regress
	touch regress

install:	$(TARG)
	# regress
	install -c $(TARG) /usr/local/bin

clean:
	rm -rf $(OFILES)

world:;		make depend; make $(TARG)

depend:;	makedepend $(CPPFLAGS) $(INCLUDES) $(OFILES:.o=.c)

# DO NOT DELETE

