#!/bin/rc
cd $TDB
awk '
BEGIN{
	smon["Jan"]="01";smon["Feb"]="02";smon["Mar"]="03"
	smon["Apr"]="04";smon["May"]="05";smon["Jun"]="06"
	smon["Jul"]="07";smon["Aug"]="08";smon["Sep"]="09"
	smon["Oct"]="10";smon["Nov"]="11";smon["Dec"]="12"
	dm[0,0]=365; dm[0,1]=31; dm[0,2] = 28; dm[0,3]=31; dm[0,4]=30
	dm[0,5]=31; dm[0,6]=30; dm[0,7]=31; dm[0,8]=31; dm[0,9]=30
	dm[0,10]=31; dm[0,11]=30; dm[0,12]=31
	dm[1,0]=366; dm[1,1]=31; dm[1,2]=29; dm[1,3]=31; dm[1,4]=30
	dm[1,5]=31; dm[1,6]=30; dm[1,7]=31; dm[1,8]=31; dm[1,9]=30
	dm[1,10]=31; dm[1,11]=30; dm[1,12]=31
	line = ARGV[1]
	per = ARGV[2]
	prog()
	exit
}

func advance() {      # lexical analyzer; returns next token
    if (tok == "(eof)") return "(eof)"
    if (length(line) == 0)
            return tok = "(eof)"
    sub(/^[ \t]+/, "", line)   # remove white space
    if (match(line, /^[A-Za-z_][A-Za-z_0-9]*/) ||    # identifier
        match(line, /^[0-9]+/) ||  # number
        match(line, /^(<|<=|==|!=|>=|>|!~)/) ||         # relational
        match(line, /^./)) {                    # everything else
            tok = substr(line, 1, RLENGTH)
            line = substr(line, RLENGTH+1)
            return tok
        }
    error("line " NR " incomprehensible at " line)
}

func prog(){
	pline = ""
	advance()
	while(tok != "(eof)") {
		if(tok == "!~")
			grep("-v")
		else if(tok == "~")
			grep("")
		else if(tok == "\\")
			cmd()
		else
			join()
	}
#	print pline
	system(pline)
}

func join(			flags, tdb, val, f){
	flags = ""
	val = ""
	tdb = "tdbjoin "
	if(tok == ",") {
		flags = " -j "
		advance()
	}
	rel = tok
	advance()
	f = mflags()
	while (f) {
		flags = flags f
		f = mflags()
	}
	if(tok == "@"){
		tdb="tdbcoin "
		advance()
	}else if(tok == ":"){
		tdb="tdblook "
		advance()
		flags = " -1 "
		range()
		val = " " addr1 " " addr2
	}else if(tok == "="){
		tdb="tdbadd -123p "
		val = getval()
		advance()
		if(val == "(eof)" || val == "_"){
			val=""
		} else
			val = " \"" val "\""
	}else if(tok == "=="){
		tdb="tdblook "
		flags = flags " -3 "
		val = getval()
		advance()
	}

	args = val ? val : ""
	if(pline)
		pline = pline "|" tdb  flags  rel args
	else
		pline = tdb flags rel args
}

func mflags(	f){
	f = ""
	if(tok == "+") {
		f =  " -m "
		advance()
	}else if(tok == "*"){
		f =  " -om "
		advance()
	}else if(tok == "?"){
		f =  " -o "
		advance()
	}else if(tok == "^"){
		f =  " -t "
		advance()
	}else if(tok == "."){
		f = " -s "
		advance()
	}else if(tok == "%"){
		f =  " -v "
		advance()
	}
	return f
}

func grep(flag){
	advance()
	re = tok
	advance()
	pline = pline " |grep -i " flag " " re
}

func getval(	i){
	if (tok == "(eof)") return "(eof)"
	if (length(line) == 0)
		return tok = "(eof)"
	sub(/^[ \t]+/, "", line)   # remove white space
	if(match(line, /^\"/)){
		sub(/^\"/, "", line)
		i = index(line, "\"")
		tok = substr(line, 1, i - 1)
		line = substr(line, i + 1)
		return tok
	} else if(match(line, /^[^ \t]*/)){                    # everything else
		tok = substr(line, 1, RLENGTH)
		line = substr(line, RLENGTH+1)
		return tok
	}
	error("line " NR " incomprehensible at " line)
}
		
func range(){
	daten="date -n"
	daten | getline now
	close(daten)
	addr1= simpleaddr()
	if(tok == ","){
		eat(",");
		addr2=simpleaddr();
		if(addr1 == "")
			addr1 = 0
		if(addr2 == "")
			addr2 = setdot("20300101")
	} else if(tok == ";"){
		eat(";");
		if(addr1 == "")
			addr = 0
		now=addr1
		addr2 = simpleaddr()
		if(addr2 == "")
			addr2 = setdot("20300101")
	} else {
		addr2 = adddot(addr1, 1)
	}
	if (addr1 == "" && addr2 == ""){
		addr1 = setdot("")
		addr2 = adddot(addr1, 1)
#		print addr1, addr2
	}
}

func eat(s) {     # read next token if s == tok
    if (tok != s) error("line " NF ": saw " tok ", expected " s)
    advance()
}

func simpleaddr(){
	# 1+2 | 1+ | +1 | . | .+1 
	addr=""
	if(tok ~ /[0-9]+/ || tok == "."){
		addr = setdot(tok)
		advance()
	}else if (tok == "^") {
		addr = 0
		advance()
	} else if (tok == "$") {
		addr = setdot("20300101")
		advance()
	}
	if(tok == "+" || tok == "-"){
		sign = tok
		if(addr=="")
			addr=setdot(".")
		advance()
		if(tok ~ /[0-9]+/) {
			addr = adddot(addr, sign tok)
			advance()
		}else {
			addr = adddot(addr, sign 1)
		}
	}
	return addr
}

func adddot(dot, n){
	return dot + (n * 60*60*24)
}

func setdot(tm,    year,mon,day,l,r,narr,nowstr) {
	l=length(tm)
	"date " now | getline nowstr
	close("date " now)
	split(nowstr, narr, " ")
	year=narr[6]
	mon=smon[narr[2]]
	day=narr[3]
	if(l==0)
		r=mktime(year,mon,day,0,0,0)
	else if (l == 1 && tm == ".")
		r=now
	else if(l==1)
		r=mktime(year,mon,tm,0,0,0)
	else if(l==2)
		r=mktime(year,mon,tm,0,0,0)
	else if(l==4)
		r=mktime(year,substr(tm,0,2), substr(tm,3,2),0,0,0)
	else if(l==6)
		r=mktime(substr(tm,0,2), substr(tm,3,2), substr(tm,5,2), 0,0,0)
	else if(l==8)
		r=mktime(substr(tm,0,4), substr(tm,5,2), substr(tm,7,2), 0,0,0)
	else{
		print "invalid time"
		r=now
	}
	return r
}

func yrsize(y) {
	if ((y%4) == 0 && ((y % 100) != 0 || (y%400) == 0))
		return 1
	else
		return 0
}

func mktime(y, mon, d, h, min, s,    secs, d2m){
	secs=0
	for (i = 1970; i < y; i++){
		d2m = yrsize(i);
		secs += dm[d2m,0] * 86400
	}
	
	d2m = yrsize(y)
	for (i = 0; i < mon - 1; i++) {
		secs += dm[d2m, i+1] * 86400
	}
	
	secs += (d - 1) * 86400
	secs += h * 3600
	secs += min * 60
	secs += s
	return secs + 14400		#puke! hard coded adjustment for EDT
}


func series(beg, end, per){
#	if (end > daten)
#		end = daten
	toggle=0
	mul=60*60*24
	pair[1]=beg
	for(i=beg + per*mul; i + 0<=end + 0; i+=per*mul){
		pair[toggle]=i
		print pair[toggle?0:1] "," pair[toggle]
		toggle=toggle?0:1
	}
}
' $*
